// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "xillybus_wrapper.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic xillybus_wrapper::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic xillybus_wrapper::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> xillybus_wrapper::ap_ST_st1_fsm_0 = "1";
const sc_lv<3> xillybus_wrapper::ap_ST_st2_fsm_1 = "10";
const sc_lv<3> xillybus_wrapper::ap_ST_st3_fsm_2 = "100";
const sc_lv<32> xillybus_wrapper::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> xillybus_wrapper::ap_const_lv1_1 = "1";
const sc_lv<32> xillybus_wrapper::ap_const_lv32_1 = "1";
const sc_lv<32> xillybus_wrapper::ap_const_lv32_2 = "10";
const sc_lv<32> xillybus_wrapper::ap_const_lv32_10 = "10000";
const sc_lv<32> xillybus_wrapper::ap_const_lv32_17 = "10111";
const sc_lv<32> xillybus_wrapper::ap_const_lv32_8 = "1000";
const sc_lv<32> xillybus_wrapper::ap_const_lv32_F = "1111";
const sc_lv<22> xillybus_wrapper::ap_const_lv22_556 = "10101010110";
const sc_lv<32> xillybus_wrapper::ap_const_lv32_C = "1100";
const sc_lv<32> xillybus_wrapper::ap_const_lv32_15 = "10101";

xillybus_wrapper::xillybus_wrapper(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_sig_bdd_26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_26 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_41 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_51 );

    SC_METHOD(thread_b_cast_fu_84_p1);
    sensitive << ( b_fu_56_p1 );

    SC_METHOD(thread_b_fu_56_p1);
    sensitive << ( in_r_dout );

    SC_METHOD(thread_g_cast_fu_80_p1);
    sensitive << ( g_fu_70_p4 );

    SC_METHOD(thread_g_fu_70_p4);
    sensitive << ( in_r_dout );

    SC_METHOD(thread_in_r_read);
    sensitive << ( in_r_empty_n );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_mul_fu_110_p0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( mul_fu_110_p00 );

    SC_METHOD(thread_mul_fu_110_p00);
    sensitive << ( tmp_3_fu_100_p2 );

    SC_METHOD(thread_mul_fu_110_p2);
    sensitive << ( mul_fu_110_p0 );

    SC_METHOD(thread_out_r_din);
    sensitive << ( out_r_full_n );
    sensitive << ( y_reg_140 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_out_r_write);
    sensitive << ( out_r_full_n );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_r_cast_fu_94_p1);
    sensitive << ( r_reg_130 );

    SC_METHOD(thread_tmp1_cast_fu_97_p1);
    sensitive << ( tmp1_reg_135 );

    SC_METHOD(thread_tmp1_fu_88_p2);
    sensitive << ( b_cast_fu_84_p1 );
    sensitive << ( g_cast_fu_80_p1 );

    SC_METHOD(thread_tmp_3_fu_100_p2);
    sensitive << ( tmp1_cast_fu_97_p1 );
    sensitive << ( r_cast_fu_94_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( in_r_empty_n );
    sensitive << ( out_r_full_n );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "xillybus_wrapper_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, in_r_dout, "(port)in_r_dout");
    sc_trace(mVcdFile, in_r_empty_n, "(port)in_r_empty_n");
    sc_trace(mVcdFile, in_r_read, "(port)in_r_read");
    sc_trace(mVcdFile, out_r_din, "(port)out_r_din");
    sc_trace(mVcdFile, out_r_full_n, "(port)out_r_full_n");
    sc_trace(mVcdFile, out_r_write, "(port)out_r_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, r_reg_130, "r_reg_130");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_26, "ap_sig_bdd_26");
    sc_trace(mVcdFile, tmp1_fu_88_p2, "tmp1_fu_88_p2");
    sc_trace(mVcdFile, tmp1_reg_135, "tmp1_reg_135");
    sc_trace(mVcdFile, y_reg_140, "y_reg_140");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_41, "ap_sig_bdd_41");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_51, "ap_sig_bdd_51");
    sc_trace(mVcdFile, g_fu_70_p4, "g_fu_70_p4");
    sc_trace(mVcdFile, b_fu_56_p1, "b_fu_56_p1");
    sc_trace(mVcdFile, b_cast_fu_84_p1, "b_cast_fu_84_p1");
    sc_trace(mVcdFile, g_cast_fu_80_p1, "g_cast_fu_80_p1");
    sc_trace(mVcdFile, tmp1_cast_fu_97_p1, "tmp1_cast_fu_97_p1");
    sc_trace(mVcdFile, r_cast_fu_94_p1, "r_cast_fu_94_p1");
    sc_trace(mVcdFile, tmp_3_fu_100_p2, "tmp_3_fu_100_p2");
    sc_trace(mVcdFile, mul_fu_110_p0, "mul_fu_110_p0");
    sc_trace(mVcdFile, mul_fu_110_p2, "mul_fu_110_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, mul_fu_110_p00, "mul_fu_110_p00");
#endif

    }
    mHdltvinHandle.open("xillybus_wrapper.hdltvin.dat");
    mHdltvoutHandle.open("xillybus_wrapper.hdltvout.dat");
}

xillybus_wrapper::~xillybus_wrapper() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void xillybus_wrapper::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(in_r_empty_n.read(), ap_const_logic_0))) {
        r_reg_130 = in_r_dout.read().range(23, 16);
        tmp1_reg_135 = tmp1_fu_88_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        y_reg_140 = mul_fu_110_p2.read().range(21, 12);
    }
}

void xillybus_wrapper::thread_ap_sig_bdd_26() {
    ap_sig_bdd_26 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void xillybus_wrapper::thread_ap_sig_bdd_41() {
    ap_sig_bdd_41 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void xillybus_wrapper::thread_ap_sig_bdd_51() {
    ap_sig_bdd_51 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void xillybus_wrapper::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_26.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void xillybus_wrapper::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_41.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void xillybus_wrapper::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_51.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void xillybus_wrapper::thread_b_cast_fu_84_p1() {
    b_cast_fu_84_p1 = esl_zext<9,8>(b_fu_56_p1.read());
}

void xillybus_wrapper::thread_b_fu_56_p1() {
    b_fu_56_p1 = in_r_dout.read().range(8-1, 0);
}

void xillybus_wrapper::thread_g_cast_fu_80_p1() {
    g_cast_fu_80_p1 = esl_zext<9,8>(g_fu_70_p4.read());
}

void xillybus_wrapper::thread_g_fu_70_p4() {
    g_fu_70_p4 = in_r_dout.read().range(15, 8);
}

void xillybus_wrapper::thread_in_r_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(in_r_empty_n.read(), ap_const_logic_0))) {
        in_r_read = ap_const_logic_1;
    } else {
        in_r_read = ap_const_logic_0;
    }
}

void xillybus_wrapper::thread_mul_fu_110_p0() {
    mul_fu_110_p0 =  (sc_lv<10>) (mul_fu_110_p00.read());
}

void xillybus_wrapper::thread_mul_fu_110_p00() {
    mul_fu_110_p00 = esl_zext<22,10>(tmp_3_fu_100_p2.read());
}

void xillybus_wrapper::thread_mul_fu_110_p2() {
    mul_fu_110_p2 = (!mul_fu_110_p0.read().is_01() || !ap_const_lv22_556.is_01())? sc_lv<22>(): sc_biguint<10>(mul_fu_110_p0.read()) * sc_biguint<22>(ap_const_lv22_556);
}

void xillybus_wrapper::thread_out_r_din() {
    out_r_din = esl_zext<32,10>(y_reg_140.read());
}

void xillybus_wrapper::thread_out_r_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(out_r_full_n.read(), ap_const_logic_0))) {
        out_r_write = ap_const_logic_1;
    } else {
        out_r_write = ap_const_logic_0;
    }
}

void xillybus_wrapper::thread_r_cast_fu_94_p1() {
    r_cast_fu_94_p1 = esl_zext<10,8>(r_reg_130.read());
}

void xillybus_wrapper::thread_tmp1_cast_fu_97_p1() {
    tmp1_cast_fu_97_p1 = esl_zext<10,9>(tmp1_reg_135.read());
}

void xillybus_wrapper::thread_tmp1_fu_88_p2() {
    tmp1_fu_88_p2 = (!b_cast_fu_84_p1.read().is_01() || !g_cast_fu_80_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(b_cast_fu_84_p1.read()) + sc_biguint<9>(g_cast_fu_80_p1.read()));
}

void xillybus_wrapper::thread_tmp_3_fu_100_p2() {
    tmp_3_fu_100_p2 = (!tmp1_cast_fu_97_p1.read().is_01() || !r_cast_fu_94_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp1_cast_fu_97_p1.read()) + sc_biguint<10>(r_cast_fu_94_p1.read()));
}

void xillybus_wrapper::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(in_r_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(out_r_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void xillybus_wrapper::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_dout\" :  \"" << in_r_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_empty_n\" :  \"" << in_r_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_r_read\" :  \"" << in_r_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_din\" :  \"" << out_r_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_full_n\" :  \"" << out_r_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_write\" :  \"" << out_r_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

