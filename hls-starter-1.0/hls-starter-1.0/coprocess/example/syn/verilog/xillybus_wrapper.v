// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="xillybus_wrapper,hls_ip_2014_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=30,HLS_SYN_LUT=10}" *)

module xillybus_wrapper (
        ap_clk,
        ap_rst,
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        out_r_din,
        out_r_full_n,
        out_r_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv22_556 = 22'b10101010110;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input  [31:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output  [31:0] out_r_din;
input   out_r_full_n;
output   out_r_write;

reg in_r_read;
reg out_r_write;
reg   [7:0] r_reg_130;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_26;
wire   [8:0] tmp1_fu_88_p2;
reg   [8:0] tmp1_reg_135;
reg   [9:0] y_reg_140;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_41;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_51;
wire   [7:0] g_fu_70_p4;
wire   [7:0] b_fu_56_p1;
wire   [8:0] b_cast_fu_84_p1;
wire   [8:0] g_cast_fu_80_p1;
wire   [9:0] tmp1_cast_fu_97_p1;
wire   [9:0] r_cast_fu_94_p1;
wire   [9:0] tmp_3_fu_100_p2;
wire   [9:0] mul_fu_110_p0;
wire   [21:0] mul_fu_110_p2;
reg   [2:0] ap_NS_fsm;
wire   [21:0] mul_fu_110_p00;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(in_r_empty_n == ap_const_logic_0))) begin
        r_reg_130 <= {{in_r_dout[ap_const_lv32_17 : ap_const_lv32_10]}};
        tmp1_reg_135 <= tmp1_fu_88_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        y_reg_140 <= {{mul_fu_110_p2[ap_const_lv32_15 : ap_const_lv32_C]}};
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_26)
begin
    if (ap_sig_bdd_26) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_41)
begin
    if (ap_sig_bdd_41) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_51)
begin
    if (ap_sig_bdd_51) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// in_r_read assign process. ///
always @ (in_r_empty_n or ap_sig_cseq_ST_st1_fsm_0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(in_r_empty_n == ap_const_logic_0))) begin
        in_r_read = ap_const_logic_1;
    end else begin
        in_r_read = ap_const_logic_0;
    end
end

/// out_r_write assign process. ///
always @ (out_r_full_n or ap_sig_cseq_ST_st3_fsm_2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(out_r_full_n == ap_const_logic_0))) begin
        out_r_write = ap_const_logic_1;
    end else begin
        out_r_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (in_r_empty_n or out_r_full_n or ap_CS_fsm)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(in_r_empty_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(out_r_full_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_26 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_26 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_41 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_41 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_51 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_51 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign b_cast_fu_84_p1 = b_fu_56_p1;
assign b_fu_56_p1 = in_r_dout[7:0];
assign g_cast_fu_80_p1 = g_fu_70_p4;
assign g_fu_70_p4 = {{in_r_dout[ap_const_lv32_F : ap_const_lv32_8]}};
assign mul_fu_110_p0 = mul_fu_110_p00;
assign mul_fu_110_p00 = tmp_3_fu_100_p2;
assign mul_fu_110_p2 = (mul_fu_110_p0 * $signed('h556));
assign out_r_din = y_reg_140;
assign r_cast_fu_94_p1 = r_reg_130;
assign tmp1_cast_fu_97_p1 = tmp1_reg_135;
assign tmp1_fu_88_p2 = (b_cast_fu_84_p1 + g_cast_fu_80_p1);
assign tmp_3_fu_100_p2 = (tmp1_cast_fu_97_p1 + r_cast_fu_94_p1);


endmodule //xillybus_wrapper

